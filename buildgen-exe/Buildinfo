-- Copyright 2011-2012 Kevin Cox

--[[---------------------------------------------------------------------------]
[                                                                              ]
[  This software is provided 'as-is', without any express or implied           ]
[  warranty. In no event will the authors be held liable for any damages       ]
[  arising from the use of this software.                                      ]
[                                                                              ]
[  Permission is granted to anyone to use this software for any purpose,       ]
[  including commercial applications, and to alter it and redistribute it      ]
[  freely, subject to the following restrictions:                              ]
[                                                                              ]
[  1. The origin of this software must not be misrepresented; you must not     ]
[     claim that you wrote the original software. If you use this software in  ]
[     a product, an acknowledgment in the product documentation would be       ]
[     appreciated but is not required.                                         ]
[                                                                              ]
[  2. Altered source versions must be plainly marked as such, and must not be  ]
[     misrepresented as being the original software.                           ]
[                                                                              ]
[  3. This notice may not be removed or altered from any source distribution.  ]                                                           *
[                                                                              ]
[-----------------------------------------------------------------------------]]

S.import "util"
S.import "c"
S.import "cpp"
S.import "lua"

L.import  "<buildgen-xml/buildgenXML.lua"

----- Executables -----

lualibsdir = "lib/"..name.."/"

S.c.generateHeader("@info.h", "@info.cpp", {
	VERSION = version,
	LUALIBS_ROOT = lualibsdir.."lualibs/",
	DEFAULT_GENERATOR = "gen-makefile",
})
S.cpp.addInclude "@"
S.cpp.addInclude "<"
S.cpp.addInclude(S.lua.includeDir())

S.cpp.addLib{"m", S.lua.libName(), "gtest"}

local headers = T.List{"@info.h"}:extend(T.dir.getfiles(".", "*.hpp"))
                                 :extend(L.buildgenXML.headers)

local sources = T.List{"@info.cpp"}:extend(T.dir.getfiles(".", "*.cpp"))
                                   :remove_value("./main.cpp")
                                   :remove_value("./test.cpp")
                                   :extend(L.buildgenXML.sources)

files = T.List{"main.cpp"}:extend(headers):extend(sources) -- Compile gen
local gen = S.cpp.compile(files, "@gen")                   --

if D.test then
	files = T.List{"test.cpp"}:extend(headers):extend(sources) -- Compile the tests

	local test = S.cpp.compile(files, "@test")
	S.addToTarget("test", test)
	S.addMagicToDefault "test"
end

S.addToDefault(gen)

S.install(gen, "bin/")

----- Lua Libraries -----
llibs =T.List(T.dir.getallfiles("lualibs/", "*.lua"))
for f in llibs:iter() do
	local lua = C.path("@"..f)
	local luo =  C.path("@"..T.path.splitext(f)..".luo")
	local tdir = T.path.join(lualibsdir, T.path.dirname(f))

	S.lua.compile(f, luo) -- Precompile.
	S.util.cp(f, lua)     -- Copy the source.

	S.install(lua, tdir)
	S.install(luo, tdir)
end

S.install("lualibs/config.ld", lualibsdir)
S.util.install("lualibs/gen-docs.sh", T.path.join(T.path.join(S.prefix, "bin"), "gen-docs"))
S.addToTarget("install",  T.path.join(S.prefix, "bin", "gen-docs"))
