-- Copyright 2011-2012 Kevin Cox

--[[---------------------------------------------------------------------------]
[                                                                              ]
[  Permission is hereby granted, free of charge, to any person obtaining a     ]
[  copy of this software and associated documentation files (the "Software"),  ]
[  to deal in the Software without restriction, including without limitation   ]
[  the rights to use, copy, modify, merge, publish, distribute, sublicense,    ]
[  and/or sell copies of the Software, and to permit persons to whom the       ]
[  Software is furnished to do so, subject to the following conditions:        ]
[                                                                              ]
[  The above copyright notice and this permission notice shall be included in  ]
[  all copies or substantial portions of the Software.                         ]
[                                                                              ]
[  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  ]
[  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    ]
[  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL     ]
[  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  ]
[  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     ]
[  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         ]
[  DEALINGS IN THE SOFTWARE.                                                   ]
[                                                                              ]
[-----------------------------------------------------------------------------]]

S.import "c"
S.import "cpp"

lualibsdir = "lib/"..name.."/"

S.c.generateHeader("@info.h", "@info.cpp", {
	VERSION = version,
	LUALIBS_ROOT = lualibsdir.."lualibs/",
	DEFAULT_GENERATOR = "gen-makefile",
})
S.cpp.addInclude "@"

S.cpp.addLib{"m", "lua"}

S.cpp.addInclude "<"

local headers = T.List{
	"commandline.hpp",
	"files.hpp",
	"globals.hpp",
	"lua-functions.hpp",
	"lua-init.hpp",
	"messages.hpp",
	"mystring.hpp",

	"@info.h",

	"<buildgen-xml/common.hpp",
	"<buildgen-xml/save.hpp",
	"<buildgen-xml/target.hpp",
}
local sources = T.List{
	"commandline.cpp",
	"files.cpp",
	"globals.cpp",
	"lua-functions.cpp",
	"lua-init.cpp",
	"messages.cpp",
	"mystring.cpp",

	"@info.cpp",

	"<buildgen-xml/common.cpp",
	"<buildgen-xml/save.cpp",
	"<buildgen-xml/target.cpp",
}

files = T.List{"main.cpp"}   -- Compile gen
files:extend(headers)        --
files:extend(sources)        --
S.cpp.compile(files, "@gen") --

files = T.List()  -- Compile the tests
files:extend(headers)
files:extend(sources)
C.addGenerator(files, {C.path"test.lua", C.path"", C.path"@test.cpp"}, {"@test.cpp"}, {
	description = "Generatring tests..."
})
files:append("@test.cpp")
S.cpp.compile(files, "@test")

S.addToDefault "@gen"

S.install("@gen", "bin/")
S.install("lualibs/", lualibsdir)
