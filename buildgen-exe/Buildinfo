-- Copyright 2011-2012 Kevin Cox

--[[---------------------------------------------------------------------------]
[                                                                              ]
[  This software is provided 'as-is', without any express or implied           ]
[  warranty. In no event will the authors be held liable for any damages       ]
[  arising from the use of this software.                                      ]
[                                                                              ]
[  Permission is granted to anyone to use this software for any purpose,       ]
[  including commercial applications, and to alter it and redistribute it      ]
[  freely, subject to the following restrictions:                              ]
[                                                                              ]
[  1. The origin of this software must not be misrepresented; you must not     ]
[     claim that you wrote the original software. If you use this software in  ]
[     a product, an acknowledgment in the product documentation would be       ]
[     appreciated but is not required.                                         ]
[                                                                              ]
[  2. Altered source versions must be plainly marked as such, and must not be  ]
[     misrepresented as being the original software.                           ]
[                                                                              ]
[  3. This notice may not be removed or altered from any source distribution.  ]                                                           *
[                                                                              ]
[-----------------------------------------------------------------------------]]

S.import "util"
S.import "c"
S.import "cpp"
S.import "lua"

----- Executables -----

lualibsdir = "lib/"..name.."/"

S.c.generateHeader("@info.h", "@info.cpp", {
	VERSION = version,
	LUALIBS_ROOT = lualibsdir.."lualibs/",
	DEFAULT_GENERATOR = "gen-makefile",
})
S.cpp.addInclude "@"

S.cpp.addLib{"m", "lua"}

S.cpp.addInclude "<"

local headers = T.List{
	"commandline.hpp",
	"files.hpp",
	"globals.hpp",
	"lua-functions.hpp",
	"lua-init.hpp",
	"messages.hpp",
	"mystring.hpp",

	"@info.h",

	"<buildgen-xml/common.hpp",
	"<buildgen-xml/save.hpp",
	"<buildgen-xml/target.hpp",
}
local sources = T.List{
	"commandline.cpp",
	"files.cpp",
	"globals.cpp",
	"lua-functions.cpp",
	"lua-init.cpp",
	"messages.cpp",
	"mystring.cpp",

	"@info.cpp",

	"<buildgen-xml/common.cpp",
	"<buildgen-xml/save.cpp",
	"<buildgen-xml/target.cpp",
}

files = T.List{"main.cpp"}               -- Compile gen
files:extend(headers)                    --
files:extend(sources)                    --
local gen = S.cpp.compile(files, "@gen") --

files = T.List()  -- Compile the tests
files:extend(headers)
files:extend(sources)
C.addGenerator(files, {C.path"test.lua", C.path"", C.path"@test.cpp"}, {"@test.cpp"}, {
	description = "Generatring tests..."
})
files:append("@test.cpp")
local test = S.cpp.compile(files, "@test")
S.addToTarget("test", test)

S.addToDefault(gen)

S.install(gen, "bin/")

----- Lua Libraries -----
llibs =T.List(T.dir.getallfiles("lualibs/", "*.lua"))
for f in llibs:iter() do
	local lua = C.path("@"..f)
	local luo =  C.path("@"..T.path.splitext(f)..".luo")
	local tdir = T.path.join(lualibsdir, T.path.dirname(f))

	S.lua.compile(f, luo) -- Precompile.
	S.util.cp(f, lua)     -- Copy the source.

	S.install(lua, tdir)
	S.install(luo, tdir)
end

S.install("lualibs/config.ld", lualibsdir)
S.util.install("lualibs/gen-docs.sh", T.path.join(S.prefix, "bin", "gen-docs"))
S.addToTarget("install",  T.path.join(S.prefix, "bin", "gen-docs"))
