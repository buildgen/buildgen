#! /usr/bin/env lua

-- Copyright 2011-2012 Kevin Cox

--[[---------------------------------------------------------------------------]
[                                                                              ]
[  Permission is hereby granted, free of charge, to any person obtaining a     ]
[  copy of this software and associated documentation files (the "Software"),  ]
[  to deal in the Software without restriction, including without limitation   ]
[  the rights to use, copy, modify, merge, publish, distribute, sublicense,    ]
[  and/or sell copies of the Software, and to permit persons to whom the       ]
[  Software is furnished to do so, subject to the following conditions:        ]
[                                                                              ]
[  The above copyright notice and this permission notice shall be included in  ]
[  all copies or substantial portions of the Software.                         ]
[                                                                              ]
[  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  ]
[  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    ]
[  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL     ]
[  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  ]
[  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     ]
[  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         ]
[  DEALINGS IN THE SOFTWARE.                                                   ]
[                                                                              ]
[-----------------------------------------------------------------------------]]

require "lfs"
require "pl"
stringx.import()

headerName = arg[1]
headerDontIncludeName = headerName:upper():gsub("[^%w]", "_")
srcName = arg[2]

dir.makepath(path.dirname(headerName))
dir.makepath(path.dirname(srcName))

header = assert(io.open(headerName, "w"))
src    = assert(io.open(srcName, "w"))

header:write([[
/***** Generated by BuildGen S.c header generator *****/
#ifndef ]] .. headerDontIncludeName .. [[

#define ]] .. headerDontIncludeName .. [[


]])
src:write([[
/***** Generated by BuildGen S.c header generator *****/


]])

local i = 2
while #arg > i do
	i = i+1

	local arg = arg[i]
	local key, value

	local b = arg:find("=") -- Find the end of the key.
	key, value = arg:sub(0, b-1), arg:sub(b+1) -- Split into the key and value

	if not key:match("^[%a_][%w_]*$") then
		error('S.c.generateHeader given an invalid key "'..key..'"')
	end

	value = value:gsub('.', {
	                          ["\\"] = "\\".."\\",
	                          ['"' ] = '\\"',
	                          ["\n"] = "\\n"
	                        })

	header:write("extern const char *"..key..';\n')
	src:write("const char *"..key..' = "'..value..'";\n')
end

header:write([[

#endif /* ]] .. headerDontIncludeName .. [[ */
]])
